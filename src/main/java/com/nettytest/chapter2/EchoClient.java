package com.nettytest.chapter2;

import java.net.InetSocketAddress;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;

public class EchoClient {
	
	private final String host;
	private final int port;
	
	public EchoClient(String host, int port){
		this.host = host;
		this.port = port;
	}
	
	public void start() throws Exception{
		
		EventLoopGroup group = new NioEventLoopGroup();
		try{
			//创建Bootstrap
			Bootstrap b = new Bootstrap();
			//指定EventLoopGroup以处理客户端事件，需要适用于NIO的实现
			b.group(group)
				//适用于NIO传输的Channel类型
				.channel(NioSocketChannel.class)
				.remoteAddress(new InetSocketAddress(host, port))
				//创建Channel时，向ChannelPipeline中添加一个EchiClientHandler实例
				.handler(new ChannelInitializer<SocketChannel>(){
				
					public void initChannel(SocketChannel ch) throws Exception{
						ch.pipeline().addLast(new EchoClientHandler());
					}
			});
			//连接到远程节点，阻塞等待知道连接完成
			ChannelFuture f = b.connect().sync();
			//阻塞，直到Channel关闭
			f.channel().closeFuture().sync();
		} finally{
			//关闭线程池并且释放所有的资源
			group.shutdownGracefully().sync();
		}
	}
	
	public static void main(String[] args) throws Exception{
		String host = "";
		int port = 8001;
		new EchoClient(host, port).start();
	}
}
